usage: cz bump [-h] [--dry-run] [--files-only] [--local-version] [--changelog]
               [--no-verify] [--yes] [--tag-format TAG_FORMAT]
               [--bump-message BUMP_MESSAGE] [--prerelease {alpha,beta,rc}]
               [--devrelease DEVRELEASE] [--increment {MAJOR,MINOR,PATCH}]
               [--increment-mode {linear,exact}] [--check-consistency]
               [--annotated-tag]
               [--annotated-tag-message ANNOTATED_TAG_MESSAGE] [--gpg-sign]
               [--changelog-to-stdout] [--git-output-to-stderr] [--retry]
               [--major-version-zero] [--template TEMPLATE] [--extra EXTRA]
               [--file-name FILE_NAME] [--prerelease-offset PRERELEASE_OFFSET]
               [--version-scheme {pep440,semver,semver2}]
               [--version-type {pep440,semver,semver2}]
               [--build-metadata BUILD_METADATA] [--get-next]
               [MANUAL_VERSION]

bump semantic version based on the git log

positional arguments:
  MANUAL_VERSION        bump to the given version (e.g: 1.5.3)

options:
  -h, --help            show this help message and exit
  --dry-run             show output to stdout, no commit, no modified files
  --files-only          bump version in the files from the config
  --local-version       bump only the local version portion
  --changelog, -ch      generate the changelog for the newest version
  --no-verify           this option bypasses the pre-commit and commit-msg
                        hooks
  --yes                 accept automatically questions done
  --tag-format TAG_FORMAT
                        the format used to tag the commit and read it, use it
                        in existing projects, wrap around simple quotes
  --bump-message BUMP_MESSAGE
                        template used to create the release commit, useful
                        when working with CI
  --prerelease {alpha,beta,rc}, -pr {alpha,beta,rc}
                        choose type of prerelease
  --devrelease DEVRELEASE, -d DEVRELEASE
                        specify non-negative integer for dev. release
  --increment {MAJOR,MINOR,PATCH}
                        manually specify the desired increment
  --increment-mode {linear,exact}
                        set the method by which the new version is chosen.
                        'linear' (default) guesses the next version based on
                        typical linear version progression, such that bumping
                        of a pre-release with lower precedence than the
                        current pre-release phase maintains the current phase
                        of higher precedence. 'exact' applies the changes that
                        have been specified (or determined from the commit
                        log) without interpretation, such that the increment
                        and pre-release are always honored
  --check-consistency, -cc
                        check consistency among versions defined in commitizen
                        configuration and version_files
  --annotated-tag, -at  create annotated tag instead of lightweight one
  --annotated-tag-message ANNOTATED_TAG_MESSAGE, -atm ANNOTATED_TAG_MESSAGE
                        create annotated tag message
  --gpg-sign, -s        sign tag instead of lightweight one
  --changelog-to-stdout
                        Output changelog to the stdout
  --git-output-to-stderr
                        Redirect git output to stderr
  --retry               retry commit if it fails the 1st time
  --major-version-zero  keep major version at zero, even for breaking changes
  --template TEMPLATE, -t TEMPLATE
                        changelog template file name (relative to the current
                        working directory)
  --extra EXTRA, -e EXTRA
                        a changelog extra variable (in the form 'key=value')
  --file-name FILE_NAME
                        file name of changelog (default: 'CHANGELOG.md')
  --prerelease-offset PRERELEASE_OFFSET
                        start pre-releases with this offset
  --version-scheme {pep440,semver,semver2}
                        choose version scheme
  --version-type {pep440,semver,semver2}
                        Deprecated, use --version-scheme
  --build-metadata BUILD_METADATA
                        Add additional build-metadata to the version-number
  --get-next            Determine the next version and write to stdout
